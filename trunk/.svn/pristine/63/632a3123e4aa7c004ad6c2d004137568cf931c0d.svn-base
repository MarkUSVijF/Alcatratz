/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.technikumwien.bic4b18_01.client.local;

import apllicationMW.GameConnection;
import at.falb.games.alcatraz.api.Alcatraz;
import at.falb.games.alcatraz.api.Player;
import java.awt.*;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.IOException;
import javax.swing.*;
import apllicationMW.Middleware;
import net.technikumwien.bic4b18_01.common.rmi.GameInfo;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import apllicationMW.ToServer;
import net.technikumwien.bic4b18_01.client.rmi.Server2Client;
import net.technikumwien.bic4b18_01.common.assist.TraceHelper;
import net.technikumwien.bic4b18_01.common.exception.GameException;
import net.technikumwien.bic4b18_01.common.settings.LoggerSettings;

/**
 *
 * @author Jasna
 */
public class GUI extends javax.swing.JFrame {

    String state="GameList_noneSelected";
    Thread daemon;
    
    
    private Integer gameID=null;
    private DefaultListModel<String> listModel = new DefaultListModel<>();
    private DefaultListModel<String> listModelGame = new DefaultListModel<>();
    private DefaultListModel<String> listModelPlyName = new DefaultListModel<>();
    private int anzahlSpieler;
    private String spielerName;

    private static final Logger logger = Logger.getLogger(TraceHelper.getClassName());

    static {
        try {
            LoggerSettings.initLogging();
        } catch (IOException ex) {
            logger.log(Level.SEVERE, "{0} -> logger could not be started", Thread.currentThread());
        }
    }

    /**
     * Creates new form GUI
     */
    public GUI() {
        Server2Client s2c=new Server2Client(this);
        Middleware.construct(s2c);
        initComponents();
        this.addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {
            }

            @Override
            public void windowClosing(WindowEvent e) {
                closeApp();
            }

            @Override
            public void windowClosed(WindowEvent e) {
            }

            @Override
            public void windowIconified(WindowEvent e) {
            }

            @Override
            public void windowDeiconified(WindowEvent e) {
            }

            @Override
            public void windowActivated(WindowEvent e) {
            }

            @Override
            public void windowDeactivated(WindowEvent e) {
            }
        });
        daemon = new Thread(() -> {
            while (true) {
                if (state.startsWith("GameList")) {
                    refreshGameList();
                }
                try {
                    Thread.sleep(10000);
                } catch (InterruptedException ex) {
                }
            }
        });
        logger.log(Level.INFO, "{0} -> daemon ? {2}.", new Object[]{Thread.currentThread().getName(), Thread.currentThread().isDaemon()});
        daemon.setDaemon(true);
        daemon.setName("GUI refresher");
        daemon.start();
        toGameList_noneSelected();

    }

    //##########################################################################
    private void refreshGameList(){
        Set<GameInfo> games;
            games = ToServer.getGames();
        listModel.removeAllElements();
        if (games.isEmpty()) {
            toGameList_noneSelected();
            return;
        }
        GameInfo mygame=null;
        for (GameInfo gi : games) {
            listModel.insertElementAt("Game ID: " + Integer.toString(gi.getGameID()) + "  " + gi.getPlayersInGame() + "/" + gi.getGameSize() + "", 0);
            if(gameID != null && gameID == gi.getGameID()) mygame=gi;
        }
        if (mygame!=null) {
            refreshGame(mygame);
        } else {
            toGameList_noneSelected();
        }
    }
    
    public void refreshGame(GameInfo game) {
        
        logger.log(Level.INFO, "{0} -> refreshing Game:{2}.", new Object[]{Thread.currentThread().getName(), game.getGameID()});
        listModelPlyName.removeAllElements();
        listModelGame.removeAllElements();
        for (Player Players : game.getPlayers()) {
            // listModelPlyName.insertElementAt(Players.getName() + "", 0);
            listModelPlyName.addElement(Players.getName() + "\n");
            listModelGame.insertElementAt(Players.getName() + "", 0);
        }
        listModelGame.insertElementAt("Players" + "", 0);
        listModelGame.insertElementAt("Max player: " + game.getGameSize() + "", 0);
        listModelGame.insertElementAt("Joined players: " + game.getPlayersInGame() + "", 0);
        logger.log(Level.INFO, "{0} -> refreshed Game:{2}.", new Object[]{Thread.currentThread().getName(), game.getGameID()});
    }

    public void startGame(GameInfo game){
        refreshGame(game);
        jPanelGameBoard.removeAll();
        jPanelGameBoard.add(GameConnection.gameInstance.getGameBoard(), BorderLayout.CENTER);
        enterState("Gameboard_playing");
    }

    //Client is playing the game when someone else wins
    public void finishGame(){
        enterState("Gameboard_ended");
    }
    
    public void closeApp(){

        if (state.equals("Gameboard_playing")) {
            System.out.println("can not exit while game is still in play.\nplease wait till your game has been won.");
            return;
        }
        try {
            ToServer.closeApp();
            Middleware.destruct();
            System.exit(0);
        } catch (GameException ex) {
            System.out.println("Error" + ex.getMessage());
        }
    }
    //##########################################################################

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jPanelGameStart = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<String>(listModel);
        GetGames = new javax.swing.JButton();
        CreateGame = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        JoinGame = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<String>(listModelGame);
        jPanelGame = new javax.swing.JPanel();
        jPanelGameBoard = new javax.swing.JPanel();
        jPanelGameInfo = new javax.swing.JPanel();
        jButtonLeaveGame = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListPlayerName = new javax.swing.JList<String>(listModelPlyName)
        ;
        menuBar = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanelGameStart.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "GAMES", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jList1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Available games", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);
        // catch double-click events

        GetGames.setText("Refresh ");
        GetGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetGamesActionPerformed(evt);
            }
        });

        CreateGame.setText("Create game");
        CreateGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateGameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(GetGames, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(CreateGame, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CreateGame)
                    .addComponent(GetGames)))
        );

        JoinGame.setText("Join Game");
        JoinGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JoinGameActionPerformed(evt);
            }
        });

        jList2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Selected game", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jList2.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jList2.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane4.setViewportView(jList2);

        JoinGame.setVisible(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(JoinGame, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 675, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(JoinGame))
        );

        javax.swing.GroupLayout jPanelGameStartLayout = new javax.swing.GroupLayout(jPanelGameStart);
        jPanelGameStart.setLayout(jPanelGameStartLayout);
        jPanelGameStartLayout.setHorizontalGroup(
            jPanelGameStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelGameStartLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelGameStartLayout.setVerticalGroup(
            jPanelGameStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelGameStartLayout.createSequentialGroup()
                .addGroup(jPanelGameStartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelGameStartLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(41, 41, 41)))
                .addGap(17, 17, 17))
        );

        jPanelGameBoard.setBorder(javax.swing.BorderFactory.createTitledBorder("GameBoard"));
        jPanelGameBoard.setAlignmentX(1.0F);
        jPanelGameBoard.setAlignmentY(1.0F);
        jPanelGameBoard.setLayout(new java.awt.BorderLayout());

        jPanelGameInfo.setBorder(javax.swing.BorderFactory.createTitledBorder("GameInfo"));

        jButtonLeaveGame.setText("leave Game");
        jButtonLeaveGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLeaveGameActionPerformed(evt);
            }
        });

        jListPlayerName.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Playername", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jListPlayerName.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jListPlayerName);

        javax.swing.GroupLayout jPanelGameInfoLayout = new javax.swing.GroupLayout(jPanelGameInfo);
        jPanelGameInfo.setLayout(jPanelGameInfoLayout);
        jPanelGameInfoLayout.setHorizontalGroup(
            jPanelGameInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGameInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelGameInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelGameInfoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonLeaveGame)))
                .addContainerGap())
        );
        jPanelGameInfoLayout.setVerticalGroup(
            jPanelGameInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGameInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonLeaveGame)
                .addContainerGap(458, Short.MAX_VALUE))
        );

        jButtonLeaveGame.setVisible(false);

        javax.swing.GroupLayout jPanelGameLayout = new javax.swing.GroupLayout(jPanelGame);
        jPanelGame.setLayout(jPanelGameLayout);
        jPanelGameLayout.setHorizontalGroup(
            jPanelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelGameBoard, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(jPanelGameInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
        );
        jPanelGameLayout.setVerticalGroup(
            jPanelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelGameInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelGameBoard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanelGameBoard.add(GameConnection.gameInstance.getGameBoard(), BorderLayout.CENTER);
        jPanelGameBoard.setVisible(true);
        jPanelGameInfo.setVisible(true);

        jLayeredPane1.setLayer(jPanelGameStart, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jPanelGame, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelGameStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelGame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelGameStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelGame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(117, Short.MAX_VALUE))
        );

        jPanelGameStart.setVisible(true);
        jPanelGame.setVisible(false);

        getContentPane().add(jLayeredPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1020, 840));
        setJMenuBar(menuBar);

        setBounds(0, 0, 1064, 800);
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void enterState(String state) {
        switch(this.state){
            case "GameList_noneSelected":
                switch(state){
                    case "GameList_gameSelected":
                        daemon.interrupt();
                        toGameList_gameSelected();
                        break;
                    case "Gameboard_waiting":
                        toGameboard_waiting();
                        break;
                    default:
                        break;
                }
                break;
            case "GameList_gameSelected":
                switch(state){
                    case "GameList_noneSelected":
                        daemon.interrupt();
                        toGameList_noneSelected();
                        break;
                    case "Gameboard_waiting":
                        toGameboard_waiting();
                        break;
                    default:
                        break;
                }
                break;
            case "Gameboard_waiting":
                switch(state){
                    case "GameList_noneSelected":
                        daemon.interrupt();
                        toGameList_noneSelected();
                        break;
                    case "Gameboard_playing":
                        toGameboard_playing();
                        break;
                    default:
                        break;
                }
                break;
            case "Gameboard_playing":
                switch(state){
                    case "Gameboard_ended":
                        toGameboard_ended();
                        break;
                    default:
                        break;
                }
                break;
            case "Gameboard_ended":
                switch(state){
                    case "GameList_noneSelected":
                        refreshGameList();
                        daemon.interrupt();
                        if (!daemon.isAlive()) {
                            daemon.start();
                        }
                        toGameList_noneSelected();
                        break;
                    default:
                        break;
                }
                break;
            default:
                break;
        }
    }
    private void toGameList_noneSelected() {
        listModelPlyName.removeAllElements();
        listModelGame.removeAllElements();
        gameID=null;
        //# GameList elements:
        jPanelGameStart.setVisible(true);
        jScrollPane4.setVisible(false);
        JoinGame.setVisible(false);
        //# GameBoard elements:
        jPanelGame.setVisible(false);
        /* encapsulates:
        jPanelGameBoard.setVisible(true);
        jPanelGameInfo.setVisible(true);
        jButtonExitApplication_GameView.setVisible(true);
        */
        jButtonLeaveGame.setVisible(false);
        state = "GameList_noneSelected";
    }

    private void toGameList_gameSelected() {
        JoinGame.setVisible(true);
        jScrollPane4.setVisible(true);
        state = "GameList_gameSelected";
    }
    private void toGameboard_waiting() {
        //# GameList elements:
        jPanelGameStart.setVisible(false);
        jScrollPane4.setVisible(false);
        JoinGame.setVisible(false);
        //# GameBoard elements:
        jPanelGame.setVisible(true);
        /* encapsulates:
        jPanelGameBoard.setVisible(true);
        jPanelGameInfo.setVisible(true);
        */
        jButtonLeaveGame.setVisible(true);
        state = "Gameboard_waiting";
    }
    private void toGameboard_playing() {
        jButtonLeaveGame.setVisible(false);
        state = "Gameboard_playing";
    }
    public void toGameboard_ended() {
        jButtonLeaveGame.setVisible(true);
        state = "Gameboard_ended";
    }


    private void GetGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GetGamesActionPerformed

        refreshGameList();
        daemon.interrupt();
        if(!daemon.isAlive()){
            daemon.start();
        }
    }//GEN-LAST:event_GetGamesActionPerformed

    private void JoinGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JoinGameActionPerformed

        JTextField sN = new JTextField();
        Object[] message = {"Name", sN};

        JOptionPane pane = new JOptionPane(message,
                JOptionPane.PLAIN_MESSAGE,
                JOptionPane.OK_CANCEL_OPTION
        );
        pane.createDialog(null, "Join game").setVisible(true);
        setSpielerName(sN.getText());

        if ((sN.getText().trim().equals("")) || (sN.getText().trim().length() == 0)) {
            System.out.println("Kein Spielername");
        } else {
            listModelPlyName.removeAllElements();

            try {
                jPanelGameBoard.removeAll();
                jPanelGameBoard.add(GameConnection.gameInstance.getGameBoard(), BorderLayout.CENTER);
                refreshGame(ToServer.joinGame(Integer.valueOf(gameID), spielerName));
                enterState("Gameboard_waiting");
                
            } catch (GameException ge) {
                 logger.log(Level.SEVERE, null, ge);
            }
        }
    }//GEN-LAST:event_JoinGameActionPerformed

    private void CreateGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateGameActionPerformed

        Integer[] anzahl = {2, 3, 4};
        JComboBox<Integer> cb = new JComboBox<>(anzahl);
        //cb.setModel(new javax.swing.ComboBoxModel<Integer>(new int[]{2, 3, 4}));
        JTextField sN = new JTextField();
        Object[] message = {"Anzahl", cb,
            "Name", sN};

        JOptionPane pane = new JOptionPane(message,
                JOptionPane.PLAIN_MESSAGE,
                JOptionPane.OK_CANCEL_OPTION);
        pane.createDialog(null, "Create game").setVisible(true);

        setSpielerName(sN.getText());
        System.out.println(sN.getText());

        setAnzahlSpieler((int) cb.getSelectedItem());
        System.out.println((int) cb.getSelectedItem());
        try {
            listModelPlyName.removeAllElements();
            ToServer.hostGame(anzahlSpieler, spielerName);

            listModelPlyName.addElement(spielerName + "\n");
            enterState("Gameboard_waiting");
          } catch (Exception ex) {
            System.out.println("Error" + ex.getMessage());
        }
    }//GEN-LAST:event_CreateGameActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        String gameList;
        Set<GameInfo> games;
            games = ToServer.getGames();

        gameList = jList1.getSelectedValue();
        if (gameList == null) {
            System.out.println("Nothing selected");
            return;
        }
        //gameID = Character.getNumericValue(gameList.charAt(9));
        gameID = Integer.valueOf(gameList.substring((gameList.indexOf(": "))+2,gameList.lastIndexOf(' ')-1));

        for (GameInfo gi : games) {
            if (gi.getGameID() == gameID) {
                listModelGame.removeAllElements();
                for (Player Players : gi.getPlayers()) {
                    listModelGame.insertElementAt(Players.getName() + "", 0);
                }
                listModelGame.insertElementAt("Players" + "", 0);
                listModelGame.insertElementAt("Max player: " + gi.getGameSize() + "", 0);
                listModelGame.insertElementAt("Joined players: " + gi.getPlayersInGame() + "", 0);

                System.out.println("Selected Game " + gameID);

                enterState("GameList_gameSelected");
            }
        }
    }//GEN-LAST:event_jList1MouseClicked

    private void jButtonLeaveGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLeaveGameActionPerformed

        try {
            if(!state.equals("Gameboard_ended")){
                ToServer.leaveGame();
            }
            enterState("GameList_noneSelected");
        } catch (GameException ge) {
            System.out.println("Error" + ge.getMessage());
        }
    }//GEN-LAST:event_jButtonLeaveGameActionPerformed

    private void setSpielerName(String string) {
        this.spielerName = string;
    }

    private void setAnzahlSpieler(int anzahl) {
        this.anzahlSpieler = anzahl;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                

}
            }
        } catch (ClassNotFoundException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreateGame;
    private javax.swing.JButton GetGames;
    private javax.swing.JButton JoinGame;
    private javax.swing.JButton jButtonLeaveGame;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JList<String> jListPlayerName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelGame;
    private javax.swing.JPanel jPanelGameBoard;
    private javax.swing.JPanel jPanelGameInfo;
    private javax.swing.JPanel jPanelGameStart;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables


}
