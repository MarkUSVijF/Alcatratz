/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.technikumwien.bic4b18_01.client.connectionMW;

import java.net.MalformedURLException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.server.UnicastRemoteObject;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.technikumwien.bic4b18_01.client.rmi.Server2Client;
import net.technikumwien.bic4b18_01.common.assist.TraceHelper;
import net.technikumwien.bic4b18_01.common.rmi.RMI_Server2Client;

/**
 *
 * @author Florian
 */
public class ConnectionOUT {

    private static final Logger logger = Logger.getLogger(TraceHelper.getClassName());

    public static void construct() {
        logger.log(Level.INFO, "Starting up clientside service...");

        while (true) {
            String connection = ToServer.construct();
            if(connection == null){
                ToServer.destruct();
                continue;
            }
            try {
                ToClient.construct(connection);
                break;
            } catch (RemoteException | MalformedURLException ex) {
                logger.log(Level.SEVERE, "local registry error [HOW?]", ex);
                ToServer.destruct();
                try {
                    int port = Integer.parseInt(connection.substring(connection.indexOf(':') + 1));
                    try {
                        UnicastRemoteObject.unexportObject(LocateRegistry.getRegistry(port), true);
                    } catch (RemoteException ex1) {
                        logger.log(Level.INFO, "localRegistry already unexported", ex1);
                    }
                    //-> need to free port too. no idea how tho
                } catch (NumberFormatException ex1) {
                    //catch everything
                }
            }
        }

        logger.log(Level.INFO, "clientside service up and running...");

    }

    public static void destruct() {
        String connection = ToServer.destruct();
        ToClient.destruct(connection);
        int port = Integer.parseInt(connection.substring(connection.indexOf(':') + 1));
        try {
            UnicastRemoteObject.unexportObject(LocateRegistry.getRegistry(port), true);
        } catch (RemoteException ex) {
            logger.log(Level.WARNING, "destruction of localregistry on port {0} not possible", port);
        }
    }

    public static IClient2ClientMW getToClient() {
        return ToClient.getInstance();
    }

    public static void construct(RMI_Server2Client s2c) {
        logger.log(Level.INFO, "Starting up clientside service...");

        while (true) {
            String connection = ToServer.construct(s2c);
            if(connection == null){
                ToServer.destruct();
                continue;
            }
            try {
                ToClient.construct(connection);
                break;
            } catch (RemoteException | MalformedURLException ex) {
                logger.log(Level.SEVERE, "local registry error [HOW?]", ex);
                ToServer.destruct();
                try {
                    int port = Integer.parseInt(connection.substring(connection.indexOf(':') + 1));
                    try {
                        UnicastRemoteObject.unexportObject(LocateRegistry.getRegistry(port), true);
                    } catch (RemoteException ex1) {
                        logger.log(Level.INFO, "localRegistry already unexported", ex1);
                    }
                    //-> need to free port too. no idea how tho
                } catch (NumberFormatException ex1) {
                    //catch everything
                }
            }
        }

        logger.log(Level.INFO, "clientside service up and running...");
    }

}
