/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.technikumwien.bic4b18_01.server.connectionMW;

import java.io.File;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.technikumwien.bic4b18_01.common.assist.RUID;
import net.technikumwien.bic4b18_01.common.assist.TODO;
import net.technikumwien.bic4b18_01.common.assist.TraceHelper;
import static net.technikumwien.bic4b18_01.common.assist.TraceHelper.getTrunk;
import net.technikumwien.bic4b18_01.common.rmi.MoveInfo;
import net.technikumwien.bic4b18_01.server.common.Data;
import net.technikumwien.bic4b18_01.server.common.Game;
import net.technikumwien.bic4b18_01.server.spread.SpreadListener;
import static net.technikumwien.bic4b18_01.server.spread.Spread_Groups.client2server;
import static net.technikumwien.bic4b18_01.server.spread.Spread_Groups.server2server;
import spread.MessageFactory;
import spread.SpreadConnection;
import spread.SpreadException;
import spread.SpreadGroup;
import spread.SpreadMessage;

/**
 * package access only
 *
 * @author Florian
 */
public class ToSpreadGroup {

    private static SpreadConnection connection = null;
    private static MessageFactory factory_01 = null;
    private static MessageFactory factory_02 = null;
    private static final Logger logger = Logger.getLogger(TraceHelper.getClassName());

    //##########################################################################
    public static void sendMessage_registerClient(long threadID, String clientConnection, int cUID) {
        SpreadMessage message = ToSpreadGroup.generateMsg(Type.SYNCHRON);
        message.setType((short) 0);
        try {
            message.digest(threadID);
            message.digest(clientConnection);
            message.digest(cUID);
            deliver(message);
        } catch (SpreadException ex) {
            Logger.getLogger(ToSpreadGroup.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void sendMessage_hostGame(long threadID, String clientConnection, int reqNR, int players, String playerName) {
        SpreadMessage message = ToSpreadGroup.generateMsg(Type.SYNCHRON);
        message.setType((short) 1);
        try {
            message.digest(threadID);
            message.digest(clientConnection);
            message.digest(reqNR);
            message.digest(players);
            message.digest(playerName);
            deliver(message);
        } catch (SpreadException ex) {
            Logger.getLogger(ToSpreadGroup.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void sendMessage_joinGame(long threadID, String clientConnection, int reqNR, int gameID, String playerName) {
        SpreadMessage message = ToSpreadGroup.generateMsg(Type.SYNCHRON);
        message.setType((short) 2);
        try {
            message.digest(threadID);
            message.digest(clientConnection);
            message.digest(reqNR);
            message.digest(gameID);
            message.digest(playerName);
            deliver(message);
        } catch (SpreadException ex) {
            Logger.getLogger(ToSpreadGroup.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void sendMessage_leaveGame(long threadID, String clientConnection, int reqNR) {
       SpreadMessage message = ToSpreadGroup.generateMsg(Type.SYNCHRON);
        message.setType((short) 3);
        try {
            message.digest(threadID);
            message.digest(clientConnection);
            message.digest(reqNR);
            deliver(message);
        } catch (SpreadException ex) {
            Logger.getLogger(ToSpreadGroup.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void sendMessage_endGame(long threadID, String clientConnection, int reqNR, ArrayDeque<MoveInfo> lastMoves) {
     SpreadMessage message = ToSpreadGroup.generateMsg(Type.SYNCHRON);
        message.setType((short) 4);
        try {
            message.digest(threadID);
            message.digest(clientConnection);
            message.digest(reqNR);
            message.digest(lastMoves);
            deliver(message);
        } catch (SpreadException ex) {
            Logger.getLogger(ToSpreadGroup.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void sendMessage_unregisterClient(long threadID, String clientConnection, int reqNR) {
        SpreadMessage message = ToSpreadGroup.generateMsg(Type.SYNCHRON);
        message.setType((short) 5);
        try {
            message.digest(threadID);
            message.digest(clientConnection);
            message.digest(reqNR);
            deliver(message);
        } catch (SpreadException ex) {
            Logger.getLogger(ToSpreadGroup.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //##########################################################################
    public static void sendMessage_playerJoined(String clientConnection, int gameID) {
        SpreadMessage message = ToSpreadGroup.generateMsg(Type.ASYNCHRON);
        message.setType((short) 10);
        try {
            message.digest(clientConnection);
            message.digest(gameID);
            deliver(message);
        } catch (SpreadException ex) {
            Logger.getLogger(ToSpreadGroup.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //##########################################################################
    static void construct() throws SpreadException {

        File trunk = getTrunk();
        List<String> daemonIPs = new ArrayList();
        SpreadGroup group;
        SpreadMessage msg;

        daemonIPs.add("127.0.0.1");
        try {
            List<String> lines = Files.readAllLines(Paths.get(trunk.getPath() + "\\spread\\src\\main\\java\\net\\technikumwien\\bic4b18_01\\spread\\local\\daemon.ip"));
            for (String line : lines) {
                if (!("".equals(line))) {
                    daemonIPs.add(line);
                }
            }
            // cleansing daemon.ip
            logger.log(Level.INFO, "daemon.ip successfully read");
        } catch (IOException ex) {
            Logger.getLogger(ConnectionOUT.class.getName()).log(Level.SEVERE, "daemon.ip unreadable");
        }

        logger.log(Level.INFO, "creating serverRUID");

        logger.log(Level.INFO, "joining spread groups with: #{0}_#", Data.getServerID());
        InetAddress ia = null;
        for (String ip : daemonIPs) {
            try {
                ia = InetAddress.getByName(ip);

                //low priority == client requests
                connection = new SpreadConnection();
                connection.connect(ia, 9101, Data.getServerID().toString(), false, true);
                group = new SpreadGroup();
                group.join(connection, client2server.toString());
                msg = new SpreadMessage();
                msg.setSafe();
                msg.addGroup(client2server.toString());
                factory_01 = new MessageFactory(msg);
                logger.log(Level.INFO, "spread group #{0}# connected with #{1}#", new Object[]{client2server, Data.getServerID()});

                //high priority == server requests
                group = new SpreadGroup();
                group.join(connection, server2server.toString());
                msg = new SpreadMessage();
                msg.setSafe();
                msg.addGroup(server2server.toString());
                factory_02 = new MessageFactory(msg);
                logger.log(Level.INFO, "spread group #{0}# connected with #{1}#", new Object[]{server2server, Data.getServerID()});

                break;
            } catch (UnknownHostException | SpreadException ex) {
                //Logger.getLogger(ConnectionMW.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (connection == null) {
            if (ia == null) {
                throw new SpreadException("null");
            }
            throw new SpreadException(ia.getHostName());
        }

        //##################################################################
        TODO.todo(ConnectionOUT.class.getName(), "finish spread implementation");

        connection.add(new SpreadListener(Data.getServerID()));

        logger.log(Level.INFO, "creating testMSG");
        Type prio = Type.ASYNCHRON;
        msg = generateMsg(prio);
        System.out.println(msg.isSafe() + "Message set to SAFE: ");
        msg.setObject("testMSG");
        msg.setType((short) 0);
        logger.log(Level.INFO, "sending testMSG");
        deliver(msg);
    }

    static void destruct() throws SpreadException {
        if (connection != null) {
            connection.disconnect();// pretty dirty
            connection = null;
        }
        factory_01 = null;
        factory_02 = null;
    }

    //######################################################################
    private static SpreadMessage generateMsg(Type priority) {
        switch (priority) {
            case SYNCHRON:
                return factory_01.createMessage();
            case ASYNCHRON:
                return factory_02.createMessage();
            default:
                return null;
        }
    }

    private static void deliver(SpreadMessage sm) throws SpreadException {
        connection.multicast(sm);
    }

    private enum Type {
        ASYNCHRON, SYNCHRON;
    }

    //######################################################################
    //public methods {sendMSG(payload);}
}
